generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model automations {
  id             String        @id @default(uuid())
  name           String
  description    String?
  type           String
  enabled        Boolean       @default(false)
  trigger        Json?
  actions        Json?
  conditions     Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  lastRunAt      DateTime?
  tasksCreated   Int           @default(0)
  tasksUpdated   Int           @default(0)
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model bank_accounts {
  id                String              @id @default(uuid())
  accountName       String
  bankName          String
  accountNumber     String
  currency          String              @default("USD")
  balance           Float               @default(0)
  organizationId    String?
  createdAt         DateTime            @default(now())
  updatedAt      DateTime @updatedAt
  organizations     organizations?      @relation(fields: [organizationId], references: [id])
  bank_transactions bank_transactions[]
  expenses          expenses[]
  invoices          invoices[]
  payments          payments[]
}

model bank_transactions {
  id             String        @id @default(uuid())
  date           DateTime
  description    String
  amount         Float
  type           String
  bankAccountId  String
  reconciled     Boolean       @default(false)
  reconciledWith String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  bank_accounts  bank_accounts @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}

model clients {
  id             String         @id @default(uuid())
  name           String
  contactPerson  String?
  email          String?
  phone          String?
  address        String?
  status         String         @default("Active")
  currency       String         @default("USD")
  rfc            String?
  taxRegime      String?
  cfdiUse        String?
  taxAddress     String?
  postalCode     String?
  billingEmail   String?
  organizationId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  invoices       invoices[]
  operations     operations[]
  quotations     quotations[]
}

model documents {
  id                    String      @id @default(uuid())
  name                  String
  type                  String      @default("file") // "file" or "folder"
  url                   String?
  b2Key                 String?     // Backblaze B2 storage key
  size                  Int?
  mimeType              String?
  parentId              String?     // For folder hierarchy
  operationId           String?
  emailMessageId        String?     // If extracted from email
  autoClassified        Boolean     @default(false)
  classifiedAs          String?     // "payment", "expense", "invoice", "image", "spam", "other"
  classificationScore   Float?      // AI confidence score
  metadata              Json?       // Additional metadata (OCR text, extracted data, etc.)
  thumbnailUrl          String?     // For images/PDFs
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  uploadedBy            String?     // User who uploaded (manual or "auto")
  operations            operations? @relation(fields: [operationId], references: [id], onDelete: Cascade)
}

model email_accounts {
  id                      String           @id @default(uuid())
  email                   String
  provider                String
  status                  String           @default("connected")
  syncEmail               Boolean          @default(false)
  syncCalendar            Boolean          @default(false)
  accessToken             String?
  refreshToken            String?
  tokenExpiry             DateTime?
  createdAt               DateTime         @default(now())
  updatedAt      DateTime @updatedAt
  lastCalendarSync        DateTime?
  lastEmailSync           DateTime?
  userId                  String
  syncedMessagesCount     Int              @default(0)
  totalMessagesInGmail    Int              @default(0)
  detectedNewestEmailDate DateTime?
  detectedOldestEmailDate DateTime?
  estimatedTotalMessages  Int?
  pendingInitialSync      Boolean          @default(true)
  storageUsageBytes       BigInt           @default(0)
  syncFromDate            DateTime?
  users                   users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  email_messages          email_messages[]
  events                  events[]

  @@unique([userId, email])
}

model email_messages {
  id              String         @id @default(uuid())
  threadId        String?
  accountId       String
  folder          String         @default("inbox")
  from            String
  fromName        String?
  to              Json
  cc              Json?
  bcc             Json?
  subject         String
  snippet         String?
  body            String
  date            DateTime
  unread          Boolean        @default(true)
  starred         Boolean        @default(false)
  messageId       String?
  createdAt       DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  attachmentsData Json?
  attachmentsKey  String?
  gmailMessageId  String
  hasAttachments  Boolean        @default(false)
  htmlBodyKey     String?
  htmlBodyUrl     String?
  inReplyTo       String?
  isReplied       Boolean        @default(false)
  labels          Json?
  references         String?
  operationId        String?
  ocrProcessed       Boolean        @default(false)
  lastOcrProcessedAt DateTime?
  email_accounts     email_accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)
  operations      operations?    @relation(fields: [operationId], references: [id])
  tasks           tasks[]

  @@unique([accountId, gmailMessageId])
  @@index([accountId, date(sort: Desc)])
  @@index([accountId, isReplied])
  @@index([accountId, unread])
  @@index([operationId])
  @@index([threadId])
}

model employees {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  role           String
  status         String         @default("Active")
  hireDate       DateTime?
  phone          String?
  department     String?
  salary         Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  userId         String?        @unique
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users?         @relation(fields: [userId], references: [id])
}

model events {
  id               String          @id @default(uuid())
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime
  location         String?
  attendees        Json?
  color            String?
  allDay           Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt      DateTime @updatedAt
  googleCalendarId String?
  googleEventId    String?
  organizationId   String?
  source           String          @default("local")
  userId           String?
  emailAccountId   String?
  status           String          @default("scheduled")
  googleUpdated    DateTime?
  lastSyncedAt     DateTime?
  notificationSent Boolean?        @default(false)
  email_accounts   email_accounts? @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  organizations    organizations?  @relation(fields: [organizationId], references: [id])
  users            users?          @relation(fields: [userId], references: [id])

  @@unique([userId, googleEventId])
  @@index([emailAccountId, status])
  @@index([userId, startDate])
}

model expenses {
  id              String         @id @default(uuid())
  itemName        String
  currency        String         @default("USD")
  exchangeRate    Float          @default(1)
  price           Float
  purchaseDate    DateTime
  employee        String?
  userId          String?
  expenseCategory String?
  purchasedFrom   String?
  notes           String?
  receiptUrl      String?
  operationId     String?
  bankAccountId   String?
  createdAt       DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizationId  String?
  bank_accounts   bank_accounts? @relation(fields: [bankAccountId], references: [id])
  operations      operations?    @relation(fields: [operationId], references: [id])
  organizations   organizations? @relation(fields: [organizationId], references: [id])
  users           users?         @relation(fields: [userId], references: [id])
}

model file_folders {
  id             String        @id @default(uuid())
  name           String
  parentId       String?
  type           String        @default("folder")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  files          files[]
}

model files {
  id             String        @id @default(uuid())
  name           String
  url            String
  size           Int
  mimeType       String
  folderId       String?
  preview        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  storageKey     String
  file_folders   file_folders? @relation(fields: [folderId], references: [id])
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model invoices {
  id             String         @id @default(uuid())
  invoiceNumber  String         @unique
  invoiceDate    DateTime
  dueDate        DateTime
  currency       String         @default("USD")
  exchangeRate   Float          @default(1)
  discount       Float          @default(0)
  discountType   String         @default("%")
  subTotal       Float
  taxAmount      Float          @default(0)
  total          Float
  status         String         @default("Draft")
  notes          String?
  clientId       String?
  operationId    String?
  bankAccountId  String?
  items          Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  reminderSent   Boolean?       @default(false)
  bank_accounts  bank_accounts? @relation(fields: [bankAccountId], references: [id])
  clients        clients?       @relation(fields: [clientId], references: [id])
  operations     operations?    @relation(fields: [operationId], references: [id])
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  payments       payments[]
}

model leads {
  id             String   @id @default(uuid())
  name           String
  email          String?
  phone          String?
  company        String?
  status         String   @default("New")
  source         String?
  notes          String?
  estimatedValue Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model notes {
  id             String         @id @default(uuid())
  content        String
  author         String
  operationId    String?
  userId         String?
  attachmentUrl  String?
  attachmentName String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  operations     operations?    @relation(fields: [operationId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users?         @relation(fields: [userId], references: [id])
}

model notification_settings {
  id                String   @id @default(uuid())
  userId            String   @unique
  pushEnabled       Boolean  @default(true)
  operationsEnabled Boolean  @default(true)
  tasksEnabled      Boolean  @default(true)
  paymentsEnabled   Boolean  @default(true)
  invoicesEnabled   Boolean  @default(true)
  expensesEnabled   Boolean  @default(true)
  calendarEnabled   Boolean  @default(true)
  emailsEnabled     Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notifications {
  id             String         @id @default(uuid())
  userId         String
  organizationId String?
  title          String
  body           String
  type           String         @default("info")
  icon           String?
  url            String?
  read           Boolean        @default(false)
  data           Json?
  createdAt      DateTime       @default(now())
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId, read])
}

model operation_assignees {
  id          String     @id @default(uuid())
  operationId String
  userId      String
  createdAt   DateTime   @default(now())
  operations  operations @relation(fields: [operationId], references: [id], onDelete: Cascade)
  users       users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([operationId, userId])
}

model operation_suppliers {
  id          String     @id @default(uuid())
  operationId String
  supplierId  String
  createdAt   DateTime   @default(now())
  operations  operations @relation(fields: [operationId], references: [id], onDelete: Cascade)
  suppliers   suppliers  @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([operationId, supplierId])
}

model operation_linking_rules {
  id                      String         @id @default(uuid())
  organizationId          String
  name                    String
  description             String?
  subjectPattern          String
  defaultAssignees        Json?
  companyDomains          Json?
  emailAccountIds         Json?
  autoCreateOperations    Boolean        @default(true)
  autoCreateClients       Boolean        @default(true)
  autoFillFields          Boolean        @default(true)
  enabled                 Boolean        @default(true)
  processFromDate         DateTime?
  lastHistoricalProcessed DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  organizations           organizations  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model operations {
  id                  String                @id @default(uuid())
  projectName         String
  projectCategory     String?
  startDate           DateTime?
  deadline            DateTime?
  status              String                @default("Planning")
  progress            Int                   @default(0)
  operationType       String?
  insurance           String?
  shippingMode        String?
  courrier            String?
  bookingTracking     String?
  etd                 DateTime?
  eta                 DateTime?
  pickupDate          DateTime?
  pickupAddress       String?
  deliveryAddress     String?
  mbl_awb             String?
  hbl_awb             String?
  description         String?
  currency            String                @default("USD")
  clientId            String?
  organizationId      String?
  createdById         String?
  needsAttention      Boolean               @default(false)
  autoCreated         Boolean               @default(false)
  missingFields       Json?
  createdAt           DateTime              @default(now())
  updatedAt      DateTime @updatedAt
  commissionHistory   Json?
  documents           documents[]
  email_messages      email_messages[]
  expenses            expenses[]
  invoices            invoices[]
  notes               notes[]
  operation_assignees operation_assignees[]
  operation_suppliers operation_suppliers[]
  clients             clients?              @relation(fields: [clientId], references: [id])
  users               users?                @relation(fields: [createdById], references: [id])
  organizations       organizations?        @relation(fields: [organizationId], references: [id])
  payments            payments[]
  tasks               tasks[]
}

model organizations {
  id                       String                     @id @default(uuid())
  name                     String
  rfc                      String?
  taxRegime                String?
  address                  String?
  phone                    String?
  email                    String?
  logo                     String?
  website                  String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  automations              automations[]
  bank_accounts            bank_accounts[]
  clients                  clients[]
  employees                employees[]
  events                   events[]
  expenses                 expenses[]
  file_folders             file_folders[]
  files                    files[]
  invoices                 invoices[]
  knowledge_base           knowledge_base[]
  notes                    notes[]
  notifications            notifications[]
  operation_linking_rules  operation_linking_rules[]
  operations               operations[]
  payments                 payments[]
  quotations               quotations[]
  suppliers                suppliers[]
  tasks                    tasks[]
  users                         users[]
  virtual_assistants            virtual_assistants[]
  document_automation_config    document_automation_config[]
}

model payments {
  id             String         @id @default(uuid())
  paymentDate    DateTime
  amount         Float
  currency       String         @default("USD")
  paymentMethod  String
  reference      String?
  notes          String?
  invoiceId      String?
  operationId    String?
  bankAccountId  String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
  bank_accounts  bank_accounts? @relation(fields: [bankAccountId], references: [id])
  invoices       invoices?      @relation(fields: [invoiceId], references: [id])
  operations     operations?    @relation(fields: [operationId], references: [id])
  organizations  organizations? @relation(fields: [organizationId], references: [id])
}

model push_subscriptions {
  id         String   @id @default(uuid())
  userId     String
  endpoint   String   @unique
  keys       Json
  userAgent  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model quotations {
  id              String         @id @default(uuid())
  quotationNumber String         @unique
  quotationDate   DateTime       @default(now())
  validUntil      DateTime?
  clientId        String?
  clientName      String?
  clientEmail     String?
  clientCompany   String?
  status          String         @default("Draft")
  currency        String         @default("USD")
  items           Json
  subtotal        Float
  tax             Float          @default(0)
  total           Float
  notes           String?
  termsConditions String?
  organizationId  String?
  createdAt       DateTime       @default(now())
  updatedAt      DateTime @updatedAt
  clients         clients?       @relation(fields: [clientId], references: [id])
  organizations   organizations? @relation(fields: [organizationId], references: [id])
}

model reconciliation_sessions {
  id                     String   @id @default(uuid())
  date                   DateTime @default(now())
  status                 String   @default("in_progress")
  reconciliationMonth    DateTime
  reconciledCount        Int      @default(0)
  unreconciledCount      Int      @default(0)
  totalTransactions      Int      @default(0)
  totalDebitTransactions Int      @default(0)
  progressPercentage     Float    @default(0)
  reconciledAmount       Float    @default(0)
  reconciliationData     Json?
  createdAt              DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model refresh_tokens {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model suppliers {
  id                  String                @id @default(uuid())
  name                String
  contactPerson       String?
  email               String?
  phone               String?
  address             String?
  status              String                @default("Active")
  category            String?
  rfc                 String?
  bankAccount         String?
  notes               String?
  organizationId      String?
  createdAt           DateTime              @default(now())
  updatedAt      DateTime @updatedAt
  operation_suppliers operation_suppliers[]
  organizations       organizations?        @relation(fields: [organizationId], references: [id])
}

model task_assignees {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  tasks     tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model tasks {
  id                      String           @id @default(uuid())
  title                   String
  description             String?
  priority                String           @default("Medium")
  dueDate                 DateTime?
  status                  String           @default("To Do")
  operationId             String?
  organizationId          String?
  createdAt               DateTime         @default(now())
  updatedAt      DateTime @updatedAt
  overdueNotificationSent Boolean          @default(false)
  emailSourceId           String?
  createdBy               TaskSource       @default(user)
  lastModifiedBy          TaskSource       @default(user)
  task_assignees          task_assignees[]
  email_messages          email_messages?  @relation(fields: [emailSourceId], references: [id])
  operations              operations?      @relation(fields: [operationId], references: [id], onDelete: Cascade)
  organizations           organizations?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model users {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String
  name                  String
  role                  String                 @default("employee")
  status                String                 @default("Active")
  phone                 String?
  avatar                String?
  organizationId        String?
  createdAt             DateTime               @default(now())
  updatedAt      DateTime @updatedAt
  email_accounts        email_accounts[]
  employees             employees?
  events                events[]
  expenses              expenses[]
  knowledge_base        knowledge_base[]
  notes                 notes[]
  notification_settings notification_settings?
  notifications         notifications[]
  operation_assignees   operation_assignees[]
  operations            operations[]
  push_subscriptions    push_subscriptions[]
  refresh_tokens        refresh_tokens[]
  task_assignees        task_assignees[]
  organizations         organizations?         @relation(fields: [organizationId], references: [id])
}

model virtual_assistants {
  id             String        @id @default(uuid())
  token          String        @unique
  name           String        @default("Asistente Virtual")
  enabled        Boolean       @default(true)
  userId         String
  organizationId String
  settings       Json?
  lastUsedAt     DateTime?
  usageCount     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum TaskSource {
  user
  automation
}

model knowledge_base {
  id             String        @id @default(uuid())
  organizationId String
  userId         String?
  category       String
  title          String
  content        String
  keywords       String[]
  contentHash    String
  relevanceScore Float         @default(1.0)
  usageCount     Int           @default(0)
  lastUsedAt     DateTime?
  source         String
  sourceId       String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime @updatedAt
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users          users?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, contentHash])
  @@index([organizationId, category])
  @@index([organizationId, relevanceScore])
}

model document_automation_config {
  id                    String        @id @default(uuid())
  organizationId        String
  enabled               Boolean       @default(false)
  autoExtractFromEmails Boolean       @default(true)
  autoClassify          Boolean       @default(true)
  autoOrganize          Boolean       @default(true)
  targetFolderRules     Json?         // Rules for organizing by classification
  excludeSpam           Boolean       @default(true)
  minConfidenceScore    Float         @default(0.7)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  organizations         organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId])
}
