generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model automations {
  id             String        @id
  name           String
  description    String?
  type           String
  enabled        Boolean       @default(false)
  trigger        Json?
  actions        Json?
  conditions     Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizationId String
  lastRunAt      DateTime?
  tasksCreated   Int           @default(0)
  tasksUpdated   Int           @default(0)
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model bank_accounts {
  id                String              @id
  accountName       String
  bankName          String
  accountNumber     String
  currency          String              @default("USD")
  balance           Float               @default(0)
  organizationId    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  organizations     organizations?      @relation(fields: [organizationId], references: [id])
  bank_transactions bank_transactions[]
  expenses          expenses[]
  invoices          invoices[]
  payments          payments[]
}

model bank_transactions {
  id             String        @id
  date           DateTime
  description    String
  amount         Float
  type           String
  bankAccountId  String
  reconciled     Boolean       @default(false)
  reconciledWith String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  bank_accounts  bank_accounts @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}

model clients {
  id             String         @id
  name           String
  contactPerson  String?
  email          String?
  phone          String?
  address        String?
  status         String         @default("Active")
  currency       String         @default("USD")
  rfc            String?
  taxRegime      String?
  cfdiUse        String?
  taxAddress     String?
  postalCode     String?
  billingEmail   String?
  organizationId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  invoices       invoices[]
  operations     operations[]
  quotations     quotations[]
}

model documents {
  id          String      @id
  name        String
  type        String      @default("file")
  url         String?
  size        Int?
  mimeType    String?
  parentId    String?
  operationId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  operations  operations? @relation(fields: [operationId], references: [id], onDelete: Cascade)
}

model email_accounts {
  id                      String           @id
  email                   String
  provider                String
  status                  String           @default("connected")
  syncEmail               Boolean          @default(false)
  syncCalendar            Boolean          @default(false)
  accessToken             String?
  refreshToken            String?
  tokenExpiry             DateTime?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime
  lastCalendarSync        DateTime?
  lastEmailSync           DateTime?
  userId                  String
  syncedMessagesCount     Int              @default(0)
  totalMessagesInGmail    Int              @default(0)
  detectedNewestEmailDate DateTime?
  detectedOldestEmailDate DateTime?
  estimatedTotalMessages  Int?
  pendingInitialSync      Boolean          @default(true)
  storageUsageBytes       BigInt           @default(0)
  syncFromDate            DateTime?
  users                   users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  email_messages          email_messages[]
  events                  events[]

  @@unique([userId, email])
}

model email_messages {
  id              String         @id
  threadId        String?
  accountId       String
  folder          String         @default("inbox")
  from            String
  fromName        String?
  to              Json
  cc              Json?
  bcc             Json?
  subject         String
  snippet         String?
  body            String
  date            DateTime
  unread          Boolean        @default(true)
  starred         Boolean        @default(false)
  messageId       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  attachmentsData Json?
  attachmentsKey  String?
  gmailMessageId  String
  hasAttachments  Boolean        @default(false)
  htmlBodyKey     String?
  htmlBodyUrl     String?
  inReplyTo       String?
  isReplied       Boolean        @default(false)
  labels          Json?
  references      String?
  operationId     String?
  email_accounts  email_accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)
  operations      operations?    @relation(fields: [operationId], references: [id])
  tasks           tasks[]

  @@unique([accountId, gmailMessageId])
  @@index([accountId, date(sort: Desc)])
  @@index([accountId, isReplied])
  @@index([accountId, unread])
  @@index([operationId])
  @@index([threadId])
}

model employees {
  id             String         @id
  name           String
  email          String         @unique
  role           String
  status         String         @default("Active")
  hireDate       DateTime?
  phone          String?
  department     String?
  salary         Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  userId         String?        @unique
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users?         @relation(fields: [userId], references: [id])
}

model events {
  id               String          @id
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime
  location         String?
  attendees        Json?
  color            String?
  allDay           Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  googleCalendarId String?
  googleEventId    String?
  organizationId   String?
  source           String          @default("local")
  userId           String?
  emailAccountId   String?
  status           String          @default("scheduled")
  googleUpdated    DateTime?
  lastSyncedAt     DateTime?
  notificationSent Boolean?        @default(false)
  email_accounts   email_accounts? @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  organizations    organizations?  @relation(fields: [organizationId], references: [id])
  users            users?          @relation(fields: [userId], references: [id])

  @@unique([userId, googleEventId])
  @@index([emailAccountId, status])
  @@index([userId, startDate])
}

model expenses {
  id              String         @id
  itemName        String
  currency        String         @default("USD")
  exchangeRate    Float          @default(1)
  price           Float
  purchaseDate    DateTime
  employee        String?
  userId          String?
  expenseCategory String?
  purchasedFrom   String?
  notes           String?
  receiptUrl      String?
  operationId     String?
  bankAccountId   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  organizationId  String?
  bank_accounts   bank_accounts? @relation(fields: [bankAccountId], references: [id])
  operations      operations?    @relation(fields: [operationId], references: [id])
  organizations   organizations? @relation(fields: [organizationId], references: [id])
  users           users?         @relation(fields: [userId], references: [id])
}

model file_folders {
  id             String        @id
  name           String
  parentId       String?
  type           String        @default("folder")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizationId String
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  files          files[]
}

model files {
  id             String        @id
  name           String
  url            String
  size           Int
  mimeType       String
  folderId       String?
  preview        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizationId String
  storageKey     String
  file_folders   file_folders? @relation(fields: [folderId], references: [id])
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model invoices {
  id             String         @id
  invoiceNumber  String         @unique
  invoiceDate    DateTime
  dueDate        DateTime
  currency       String         @default("USD")
  exchangeRate   Float          @default(1)
  discount       Float          @default(0)
  discountType   String         @default("%")
  subTotal       Float
  taxAmount      Float          @default(0)
  total          Float
  status         String         @default("Draft")
  notes          String?
  clientId       String?
  operationId    String?
  bankAccountId  String?
  items          Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  reminderSent   Boolean?       @default(false)
  bank_accounts  bank_accounts? @relation(fields: [bankAccountId], references: [id])
  clients        clients?       @relation(fields: [clientId], references: [id])
  operations     operations?    @relation(fields: [operationId], references: [id])
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  payments       payments[]
}

model leads {
  id             String   @id
  name           String
  email          String?
  phone          String?
  company        String?
  status         String   @default("New")
  source         String?
  notes          String?
  estimatedValue Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model notes {
  id             String         @id
  content        String
  author         String
  operationId    String?
  userId         String?
  attachmentUrl  String?
  attachmentName String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  operations     operations?    @relation(fields: [operationId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users?         @relation(fields: [userId], references: [id])
}

model notification_settings {
  id                String   @id
  userId            String   @unique
  pushEnabled       Boolean  @default(true)
  operationsEnabled Boolean  @default(true)
  tasksEnabled      Boolean  @default(true)
  paymentsEnabled   Boolean  @default(true)
  invoicesEnabled   Boolean  @default(true)
  expensesEnabled   Boolean  @default(true)
  calendarEnabled   Boolean  @default(true)
  emailsEnabled     Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notifications {
  id             String         @id
  userId         String
  organizationId String?
  title          String
  body           String
  type           String         @default("info")
  icon           String?
  url            String?
  read           Boolean        @default(false)
  data           Json?
  createdAt      DateTime       @default(now())
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  users          users          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId, read])
}

model operation_assignees {
  id          String     @id
  operationId String
  userId      String
  createdAt   DateTime   @default(now())
  operations  operations @relation(fields: [operationId], references: [id], onDelete: Cascade)
  users       users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([operationId, userId])
}

model operation_suppliers {
  id          String     @id
  operationId String
  supplierId  String
  createdAt   DateTime   @default(now())
  operations  operations @relation(fields: [operationId], references: [id], onDelete: Cascade)
  suppliers   suppliers  @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([operationId, supplierId])
}

model operations {
  id                  String                @id
  projectName         String
  projectCategory     String?
  startDate           DateTime?
  deadline            DateTime?
  status              String                @default("Planning")
  progress            Int                   @default(0)
  operationType       String?
  insurance           String?
  shippingMode        String?
  courrier            String?
  bookingTracking     String?
  etd                 DateTime?
  eta                 DateTime?
  pickupDate          DateTime?
  pickupAddress       String?
  deliveryAddress     String?
  mbl_awb             String?
  hbl_awb             String?
  notes               String?
  currency            String                @default("USD")
  clientId            String?
  organizationId      String?
  createdById         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  commissionHistory   Json?
  documents           documents[]
  email_messages      email_messages[]
  expenses            expenses[]
  invoices            invoices[]
  notes               notes[]
  operation_assignees operation_assignees[]
  operation_suppliers operation_suppliers[]
  clients             clients?              @relation(fields: [clientId], references: [id])
  users               users?                @relation(fields: [createdById], references: [id])
  organizations       organizations?        @relation(fields: [organizationId], references: [id])
  payments            payments[]
  tasks               tasks[]
}

model organizations {
  id                 String               @id
  name               String
  rfc                String?
  taxRegime          String?
  address            String?
  phone              String?
  email              String?
  logo               String?
  website            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  automations        automations[]
  bank_accounts      bank_accounts[]
  clients            clients[]
  employees          employees[]
  events             events[]
  expenses           expenses[]
  file_folders       file_folders[]
  files              files[]
  invoices           invoices[]
  notes              notes[]
  notifications      notifications[]
  operations         operations[]
  payments           payments[]
  suppliers          suppliers[]
  tasks              tasks[]
  users              users[]
  virtual_assistants virtual_assistants[]
}

model payments {
  id             String         @id
  paymentDate    DateTime
  amount         Float
  currency       String         @default("USD")
  paymentMethod  String
  reference      String?
  notes          String?
  invoiceId      String?
  operationId    String?
  bankAccountId  String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  bank_accounts  bank_accounts? @relation(fields: [bankAccountId], references: [id])
  invoices       invoices?      @relation(fields: [invoiceId], references: [id])
  operations     operations?    @relation(fields: [operationId], references: [id])
  organizations  organizations? @relation(fields: [organizationId], references: [id])
}

model push_subscriptions {
  id         String   @id
  userId     String
  endpoint   String   @unique
  keys       Json
  userAgent  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model quotations {
  id              String    @id
  quotationNumber String    @unique
  quotationDate   DateTime  @default(now())
  validUntil      DateTime?
  clientId        String?
  clientName      String?
  clientEmail     String?
  clientCompany   String?
  status          String    @default("Draft")
  currency        String    @default("USD")
  items           Json
  subtotal        Float
  tax             Float     @default(0)
  total           Float
  notes           String?
  termsConditions String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  clients         clients?  @relation(fields: [clientId], references: [id])
}

model reconciliation_sessions {
  id                     String   @id
  date                   DateTime @default(now())
  status                 String   @default("in_progress")
  reconciliationMonth    DateTime
  reconciledCount        Int      @default(0)
  unreconciledCount      Int      @default(0)
  totalTransactions      Int      @default(0)
  totalDebitTransactions Int      @default(0)
  progressPercentage     Float    @default(0)
  reconciledAmount       Float    @default(0)
  reconciliationData     Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime
}

model refresh_tokens {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model suppliers {
  id                  String                @id
  name                String
  contactPerson       String?
  email               String?
  phone               String?
  address             String?
  status              String                @default("Active")
  category            String?
  rfc                 String?
  bankAccount         String?
  notes               String?
  organizationId      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  operation_suppliers operation_suppliers[]
  organizations       organizations?        @relation(fields: [organizationId], references: [id])
}

model task_assignees {
  id        String   @id
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  tasks     tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model tasks {
  id                      String           @id
  title                   String
  description             String?
  priority                String           @default("Medium")
  dueDate                 DateTime?
  status                  String           @default("To Do")
  operationId             String?
  organizationId          String?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime
  overdueNotificationSent Boolean          @default(false)
  emailSourceId           String?
  createdBy               TaskSource       @default(user)
  lastModifiedBy          TaskSource       @default(user)
  task_assignees          task_assignees[]
  email_messages          email_messages?  @relation(fields: [emailSourceId], references: [id])
  operations              operations?      @relation(fields: [operationId], references: [id], onDelete: Cascade)
  organizations           organizations?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model users {
  id                    String                 @id
  email                 String                 @unique
  password              String
  name                  String
  role                  String                 @default("employee")
  status                String                 @default("Active")
  phone                 String?
  avatar                String?
  organizationId        String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  email_accounts        email_accounts[]
  employees             employees?
  events                events[]
  expenses              expenses[]
  notes                 notes[]
  notification_settings notification_settings?
  notifications         notifications[]
  operation_assignees   operation_assignees[]
  operations            operations[]
  push_subscriptions    push_subscriptions[]
  refresh_tokens        refresh_tokens[]
  task_assignees        task_assignees[]
  organizations         organizations?         @relation(fields: [organizationId], references: [id])
}

model virtual_assistants {
  id             String        @id
  token          String        @unique
  name           String        @default("Asistente Virtual")
  enabled        Boolean       @default(true)
  userId         String
  organizationId String
  settings       Json?
  lastUsedAt     DateTime?
  usageCount     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum TaskSource {
  user
  automation
}
